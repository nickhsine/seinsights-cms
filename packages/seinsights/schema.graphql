# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type About {
  id: ID!
  aboutUs: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AboutWhereUniqueInput {
  id: ID
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  aboutUs: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AboutOrderByInput {
  id: OrderDirection
  aboutUs: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AboutUpdateInput {
  aboutUs: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput!
  data: AboutUpdateInput!
}

input AboutCreateInput {
  aboutUs: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Banner {
  id: ID!
  name: String
  order: Int
  bannerImage: Photo
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input BannerWhereUniqueInput {
  id: ID
  order: Int
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  bannerImage: PhotoWhereInput
  isActive: BooleanFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input BannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  isActive: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BannerUpdateInput {
  name: String
  order: Int
  bannerImage: PhotoRelateToOneForUpdateInput
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input BannerUpdateArgs {
  where: BannerWhereUniqueInput!
  data: BannerUpdateInput!
}

input BannerCreateInput {
  name: String
  order: Int
  bannerImage: PhotoRelateToOneForCreateInput
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  slug: String
  order: Int
  status: CategoryStatusType
  heroImage: Photo
  section: Section
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum CategoryStatusType {
  active
  inactive
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
  order: Int
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  order: IntNullableFilter
  status: CategoryStatusTypeNullableFilter
  heroImage: PhotoWhereInput
  section: SectionWhereInput
  posts: PostManyRelationFilter
  specialfeatures: SpecialfeatureManyRelationFilter
  events: EventManyRelationFilter
  jobs: JobManyRelationFilter
  resources: ResourceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryStatusTypeNullableFilter {
  equals: CategoryStatusType
  in: [CategoryStatusType!]
  notIn: [CategoryStatusType!]
  not: CategoryStatusTypeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input SpecialfeatureManyRelationFilter {
  every: SpecialfeatureWhereInput
  some: SpecialfeatureWhereInput
  none: SpecialfeatureWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input JobManyRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input ResourceManyRelationFilter {
  every: ResourceWhereInput
  some: ResourceWhereInput
  none: ResourceWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  order: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  order: Int
  status: CategoryStatusType
  heroImage: PhotoRelateToOneForUpdateInput
  section: SectionRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  jobs: JobRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SectionRelateToOneForUpdateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input SpecialfeatureRelateToManyForUpdateInput {
  disconnect: [SpecialfeatureWhereUniqueInput!]
  set: [SpecialfeatureWhereUniqueInput!]
  create: [SpecialfeatureCreateInput!]
  connect: [SpecialfeatureWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input JobRelateToManyForUpdateInput {
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input ResourceRelateToManyForUpdateInput {
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  order: Int
  status: CategoryStatusType
  heroImage: PhotoRelateToOneForCreateInput
  section: SectionRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  jobs: JobRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SectionRelateToOneForCreateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input SpecialfeatureRelateToManyForCreateInput {
  create: [SpecialfeatureCreateInput!]
  connect: [SpecialfeatureWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input JobRelateToManyForCreateInput {
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input ResourceRelateToManyForCreateInput {
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

type Column {
  id: ID!
  name: String
  columnName: String
  type: ColumnTypeType
  profile_photo: Photo
  intro: JSON
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum ColumnTypeType {
  trend
  entrepreneur
  publication
}

input ColumnWhereUniqueInput {
  id: ID
}

input ColumnWhereInput {
  AND: [ColumnWhereInput!]
  OR: [ColumnWhereInput!]
  NOT: [ColumnWhereInput!]
  id: IDFilter
  name: StringFilter
  columnName: StringFilter
  type: ColumnTypeTypeNullableFilter
  profile_photo: PhotoWhereInput
  posts: PostManyRelationFilter
  specialfeatures: SpecialfeatureManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ColumnTypeTypeNullableFilter {
  equals: ColumnTypeType
  in: [ColumnTypeType!]
  notIn: [ColumnTypeType!]
  not: ColumnTypeTypeNullableFilter
}

input ColumnOrderByInput {
  id: OrderDirection
  name: OrderDirection
  columnName: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ColumnUpdateInput {
  name: String
  columnName: String
  type: ColumnTypeType
  profile_photo: PhotoRelateToOneForUpdateInput
  intro: JSON
  posts: PostRelateToManyForUpdateInput
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ColumnUpdateArgs {
  where: ColumnWhereUniqueInput!
  data: ColumnUpdateInput!
}

input ColumnCreateInput {
  name: String
  columnName: String
  type: ColumnTypeType
  profile_photo: PhotoRelateToOneForCreateInput
  intro: JSON
  posts: PostRelateToManyForCreateInput
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type EditorChoice {
  id: ID!
  order: Int
  post: Post
  specialfeature: Specialfeature
  status: EditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum EditorChoiceStatusType {
  published
  draft
  archived
}

input EditorChoiceWhereUniqueInput {
  id: ID
  order: Int
}

input EditorChoiceWhereInput {
  AND: [EditorChoiceWhereInput!]
  OR: [EditorChoiceWhereInput!]
  NOT: [EditorChoiceWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  post: PostWhereInput
  specialfeature: SpecialfeatureWhereInput
  status: EditorChoiceStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EditorChoiceStatusTypeNullableFilter {
  equals: EditorChoiceStatusType
  in: [EditorChoiceStatusType!]
  notIn: [EditorChoiceStatusType!]
  not: EditorChoiceStatusTypeNullableFilter
}

input EditorChoiceOrderByInput {
  id: OrderDirection
  order: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EditorChoiceUpdateInput {
  order: Int
  post: PostRelateToOneForUpdateInput
  specialfeature: SpecialfeatureRelateToOneForUpdateInput
  status: EditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input SpecialfeatureRelateToOneForUpdateInput {
  create: SpecialfeatureCreateInput
  connect: SpecialfeatureWhereUniqueInput
  disconnect: Boolean
}

input EditorChoiceUpdateArgs {
  where: EditorChoiceWhereUniqueInput!
  data: EditorChoiceUpdateInput!
}

input EditorChoiceCreateInput {
  order: Int
  post: PostRelateToOneForCreateInput
  specialfeature: SpecialfeatureRelateToOneForCreateInput
  status: EditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

input SpecialfeatureRelateToOneForCreateInput {
  create: SpecialfeatureCreateInput
  connect: SpecialfeatureWhereUniqueInput
}

type Event {
  id: ID!
  name: String
  eventStatus: String
  status: EventStatusType
  publishDate: DateTime
  type: EventTypeType
  region: EventRegionType
  section(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  heroImage: Photo
  content: JSON
  location: String
  organization: String
  event_start: DateTime
  event_end: DateTime
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  relatedEvents(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  relatedEventsCount(where: EventWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum EventStatusType {
  published
  draft
  archived
}

enum EventTypeType {
  seinsight
  external
}

enum EventRegionType {
  global
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  status: EventStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  type: EventTypeTypeNullableFilter
  region: EventRegionTypeNullableFilter
  section: SectionManyRelationFilter
  category: CategoryManyRelationFilter
  heroImage: PhotoWhereInput
  location: StringFilter
  organization: StringFilter
  event_start: DateTimeNullableFilter
  event_end: DateTimeNullableFilter
  tags: TagManyRelationFilter
  relatedEvents: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EventStatusTypeNullableFilter {
  equals: EventStatusType
  in: [EventStatusType!]
  notIn: [EventStatusType!]
  not: EventStatusTypeNullableFilter
}

input EventTypeTypeNullableFilter {
  equals: EventTypeType
  in: [EventTypeType!]
  notIn: [EventTypeType!]
  not: EventTypeTypeNullableFilter
}

input EventRegionTypeNullableFilter {
  equals: EventRegionType
  in: [EventRegionType!]
  notIn: [EventRegionType!]
  not: EventRegionTypeNullableFilter
}

input SectionManyRelationFilter {
  every: SectionWhereInput
  some: SectionWhereInput
  none: SectionWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  type: OrderDirection
  region: OrderDirection
  location: OrderDirection
  organization: OrderDirection
  event_start: OrderDirection
  event_end: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  name: String
  status: EventStatusType
  publishDate: DateTime
  type: EventTypeType
  region: EventRegionType
  section: SectionRelateToManyForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  content: JSON
  location: String
  organization: String
  event_start: DateTime
  event_end: DateTime
  tags: TagRelateToManyForUpdateInput
  relatedEvents: EventRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SectionRelateToManyForUpdateInput {
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  status: EventStatusType
  publishDate: DateTime
  type: EventTypeType
  region: EventRegionType
  section: SectionRelateToManyForCreateInput
  category: CategoryRelateToManyForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  content: JSON
  location: String
  organization: String
  event_start: DateTime
  event_end: DateTime
  tags: TagRelateToManyForCreateInput
  relatedEvents: EventRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SectionRelateToManyForCreateInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type EventBanner {
  id: ID!
  name: String
  order: Int
  heroImage: Photo
  status: EventBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum EventBannerStatusType {
  published
  draft
  archived
}

input EventBannerWhereUniqueInput {
  id: ID
  order: Int
}

input EventBannerWhereInput {
  AND: [EventBannerWhereInput!]
  OR: [EventBannerWhereInput!]
  NOT: [EventBannerWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  heroImage: PhotoWhereInput
  status: EventBannerStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EventBannerStatusTypeNullableFilter {
  equals: EventBannerStatusType
  in: [EventBannerStatusType!]
  notIn: [EventBannerStatusType!]
  not: EventBannerStatusTypeNullableFilter
}

input EventBannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventBannerUpdateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForUpdateInput
  status: EventBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EventBannerUpdateArgs {
  where: EventBannerWhereUniqueInput!
  data: EventBannerUpdateInput!
}

input EventBannerCreateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForCreateInput
  status: EventBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type FooterBanner {
  id: ID!
  name: String
  order: Int
  bannerImage: Photo
  mobileImage: Photo
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FooterBannerWhereUniqueInput {
  id: ID
  order: Int
}

input FooterBannerWhereInput {
  AND: [FooterBannerWhereInput!]
  OR: [FooterBannerWhereInput!]
  NOT: [FooterBannerWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  bannerImage: PhotoWhereInput
  mobileImage: PhotoWhereInput
  isActive: BooleanFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FooterBannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  isActive: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FooterBannerUpdateInput {
  name: String
  order: Int
  bannerImage: PhotoRelateToOneForUpdateInput
  mobileImage: PhotoRelateToOneForUpdateInput
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FooterBannerUpdateArgs {
  where: FooterBannerWhereUniqueInput!
  data: FooterBannerUpdateInput!
}

input FooterBannerCreateInput {
  name: String
  order: Int
  bannerImage: PhotoRelateToOneForCreateInput
  mobileImage: PhotoRelateToOneForCreateInput
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type HomepageBanner {
  id: ID!
  name: String
  order: Int
  heroImage: Photo
  status: HomepageBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum HomepageBannerStatusType {
  published
  draft
  archived
}

input HomepageBannerWhereUniqueInput {
  id: ID
  order: Int
}

input HomepageBannerWhereInput {
  AND: [HomepageBannerWhereInput!]
  OR: [HomepageBannerWhereInput!]
  NOT: [HomepageBannerWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  heroImage: PhotoWhereInput
  status: HomepageBannerStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input HomepageBannerStatusTypeNullableFilter {
  equals: HomepageBannerStatusType
  in: [HomepageBannerStatusType!]
  notIn: [HomepageBannerStatusType!]
  not: HomepageBannerStatusTypeNullableFilter
}

input HomepageBannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HomepageBannerUpdateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForUpdateInput
  status: HomepageBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input HomepageBannerUpdateArgs {
  where: HomepageBannerWhereUniqueInput!
  data: HomepageBannerUpdateInput!
}

input HomepageBannerCreateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForCreateInput
  status: HomepageBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Job {
  id: ID!
  name: String
  jobStatus: JobJobStatusType
  status: JobStatusType
  publishDate: DateTime
  type: JobTypeType
  region: JobRegionType
  section(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  company: String
  location: String
  official_website: String
  official_website_titile: String
  profile_photo: Photo
  content: JSON
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  relatedJobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  relatedJobsCount(where: JobWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum JobJobStatusType {
  opening
  closed
}

enum JobStatusType {
  published
  draft
  archived
}

enum JobTypeType {
  fulltime
  parttime
  intern
  volunteer
}

enum JobRegionType {
  global
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
}

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  name: StringFilter
  jobStatus: JobJobStatusTypeNullableFilter
  status: JobStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  type: JobTypeTypeNullableFilter
  region: JobRegionTypeNullableFilter
  section: SectionManyRelationFilter
  category: CategoryManyRelationFilter
  company: StringFilter
  location: StringFilter
  official_website: StringFilter
  official_website_titile: StringFilter
  profile_photo: PhotoWhereInput
  tags: TagManyRelationFilter
  relatedJobs: JobManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input JobJobStatusTypeNullableFilter {
  equals: JobJobStatusType
  in: [JobJobStatusType!]
  notIn: [JobJobStatusType!]
  not: JobJobStatusTypeNullableFilter
}

input JobStatusTypeNullableFilter {
  equals: JobStatusType
  in: [JobStatusType!]
  notIn: [JobStatusType!]
  not: JobStatusTypeNullableFilter
}

input JobTypeTypeNullableFilter {
  equals: JobTypeType
  in: [JobTypeType!]
  notIn: [JobTypeType!]
  not: JobTypeTypeNullableFilter
}

input JobRegionTypeNullableFilter {
  equals: JobRegionType
  in: [JobRegionType!]
  notIn: [JobRegionType!]
  not: JobRegionTypeNullableFilter
}

input JobOrderByInput {
  id: OrderDirection
  name: OrderDirection
  jobStatus: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  type: OrderDirection
  region: OrderDirection
  company: OrderDirection
  location: OrderDirection
  official_website: OrderDirection
  official_website_titile: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input JobUpdateInput {
  name: String
  jobStatus: JobJobStatusType
  status: JobStatusType
  publishDate: DateTime
  type: JobTypeType
  region: JobRegionType
  section: SectionRelateToManyForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  company: String
  location: String
  official_website: String
  official_website_titile: String
  profile_photo: PhotoRelateToOneForUpdateInput
  content: JSON
  tags: TagRelateToManyForUpdateInput
  relatedJobs: JobRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  name: String
  jobStatus: JobJobStatusType
  status: JobStatusType
  publishDate: DateTime
  type: JobTypeType
  region: JobRegionType
  section: SectionRelateToManyForCreateInput
  category: CategoryRelateToManyForCreateInput
  company: String
  location: String
  official_website: String
  official_website_titile: String
  profile_photo: PhotoRelateToOneForCreateInput
  content: JSON
  tags: TagRelateToManyForCreateInput
  relatedJobs: JobRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type JobBanner {
  id: ID!
  name: String
  order: Int
  heroImage: Photo
  status: JobBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum JobBannerStatusType {
  published
  draft
  archived
}

input JobBannerWhereUniqueInput {
  id: ID
  order: Int
}

input JobBannerWhereInput {
  AND: [JobBannerWhereInput!]
  OR: [JobBannerWhereInput!]
  NOT: [JobBannerWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  heroImage: PhotoWhereInput
  status: JobBannerStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input JobBannerStatusTypeNullableFilter {
  equals: JobBannerStatusType
  in: [JobBannerStatusType!]
  notIn: [JobBannerStatusType!]
  not: JobBannerStatusTypeNullableFilter
}

input JobBannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input JobBannerUpdateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForUpdateInput
  status: JobBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input JobBannerUpdateArgs {
  where: JobBannerWhereUniqueInput!
  data: JobBannerUpdateInput!
}

input JobBannerCreateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForCreateInput
  status: JobBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Member {
  id: ID!
  firebaseId: String
  isActive: Boolean
  hasSetCategories: Boolean
  email: String
  donationType: String
  beginDate: DateTime
  endDate: DateTime
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  favoritePosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  favoritePostsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MemberWhereUniqueInput {
  id: ID
  firebaseId: String
  email: String
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  firebaseId: StringNullableFilter
  isActive: BooleanFilter
  hasSetCategories: BooleanFilter
  email: StringFilter
  donationType: StringFilter
  beginDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  categories: CategoryManyRelationFilter
  favoritePosts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input MemberOrderByInput {
  id: OrderDirection
  firebaseId: OrderDirection
  isActive: OrderDirection
  hasSetCategories: OrderDirection
  email: OrderDirection
  donationType: OrderDirection
  beginDate: OrderDirection
  endDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MemberUpdateInput {
  firebaseId: String
  isActive: Boolean
  hasSetCategories: Boolean
  email: String
  donationType: String
  beginDate: DateTime
  endDate: DateTime
  categories: CategoryRelateToManyForUpdateInput
  favoritePosts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  firebaseId: String
  isActive: Boolean
  hasSetCategories: Boolean
  email: String
  donationType: String
  beginDate: DateTime
  endDate: DateTime
  categories: CategoryRelateToManyForCreateInput
  favoritePosts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Menubar {
  id: ID!
  name: String
  order: Int
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MenubarWhereUniqueInput {
  id: ID
  order: Int
}

input MenubarWhereInput {
  AND: [MenubarWhereInput!]
  OR: [MenubarWhereInput!]
  NOT: [MenubarWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  isActive: BooleanFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input MenubarOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  isActive: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MenubarUpdateInput {
  name: String
  order: Int
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MenubarUpdateArgs {
  where: MenubarWhereUniqueInput!
  data: MenubarUpdateInput!
}

input MenubarCreateInput {
  name: String
  order: Int
  isActive: Boolean
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  file: CustomFileFieldOutput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

interface CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input PhotoWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type LocalCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CustomFileFieldInput {
  upload: Upload
  ref: String
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Post {
  id: ID!
  title: String
  weight: Int
  storyType: String
  status: PostStatusType
  publishDate: DateTime
  heroImage: Photo
  heroCaption: String
  heroCreditUrl: String
  brief: JSON
  content: JSON
  columns(
    where: ColumnWhereInput! = {}
    orderBy: [ColumnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Column!]
  columnsCount(where: ColumnWhereInput! = {}): Int
  section(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  region: String
  relatedPosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  isPremium: Boolean
  previewButton: String
  oldCategory: String
  apiDataBrief: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum PostStatusType {
  published
  draft
  scheduled
  archived
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  weight: IntNullableFilter
  storyType: StringNullableFilter
  status: PostStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  heroCreditUrl: StringFilter
  columns: ColumnManyRelationFilter
  section: SectionManyRelationFilter
  category: CategoryManyRelationFilter
  region: StringNullableFilter
  relatedPosts: PostManyRelationFilter
  tags: TagManyRelationFilter
  isPremium: BooleanFilter
  oldCategory: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input ColumnManyRelationFilter {
  every: ColumnWhereInput
  some: ColumnWhereInput
  none: ColumnWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  weight: OrderDirection
  storyType: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  heroCaption: OrderDirection
  heroCreditUrl: OrderDirection
  region: OrderDirection
  isPremium: OrderDirection
  oldCategory: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  weight: Int
  storyType: String
  status: PostStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  heroCreditUrl: String
  brief: JSON
  content: JSON
  columns: ColumnRelateToManyForUpdateInput
  section: SectionRelateToManyForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  region: String
  relatedPosts: PostRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  isPremium: Boolean
  oldCategory: String
  apiDataBrief: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ColumnRelateToManyForUpdateInput {
  disconnect: [ColumnWhereUniqueInput!]
  set: [ColumnWhereUniqueInput!]
  create: [ColumnCreateInput!]
  connect: [ColumnWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  weight: Int
  storyType: String
  status: PostStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  heroCreditUrl: String
  brief: JSON
  content: JSON
  columns: ColumnRelateToManyForCreateInput
  section: SectionRelateToManyForCreateInput
  category: CategoryRelateToManyForCreateInput
  region: String
  relatedPosts: PostRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  isPremium: Boolean
  oldCategory: String
  apiDataBrief: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input ColumnRelateToManyForCreateInput {
  create: [ColumnCreateInput!]
  connect: [ColumnWhereUniqueInput!]
}

type Resource {
  id: ID!
  name: String
  slogan: String
  status: ResourceStatusType
  publishDate: DateTime
  region: ResourceRegionType
  section(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  profile_photo: Photo
  content: JSON
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  contact: JSON
  link: JSON
  relatedResources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  relatedResourcesCount(where: ResourceWhereInput! = {}): Int
  apiData: JSON
  apiDataContact: JSON
  apiDataLink: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum ResourceStatusType {
  published
  draft
  archived
}

enum ResourceRegionType {
  global
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
}

input ResourceWhereUniqueInput {
  id: ID
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  id: IDFilter
  name: StringFilter
  slogan: StringFilter
  status: ResourceStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  region: ResourceRegionTypeNullableFilter
  section: SectionManyRelationFilter
  category: CategoryManyRelationFilter
  profile_photo: PhotoWhereInput
  tags: TagManyRelationFilter
  relatedResources: ResourceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ResourceStatusTypeNullableFilter {
  equals: ResourceStatusType
  in: [ResourceStatusType!]
  notIn: [ResourceStatusType!]
  not: ResourceStatusTypeNullableFilter
}

input ResourceRegionTypeNullableFilter {
  equals: ResourceRegionType
  in: [ResourceRegionType!]
  notIn: [ResourceRegionType!]
  not: ResourceRegionTypeNullableFilter
}

input ResourceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slogan: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  region: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ResourceUpdateInput {
  name: String
  slogan: String
  status: ResourceStatusType
  publishDate: DateTime
  region: ResourceRegionType
  section: SectionRelateToManyForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  profile_photo: PhotoRelateToOneForUpdateInput
  content: JSON
  tags: TagRelateToManyForUpdateInput
  contact: JSON
  link: JSON
  relatedResources: ResourceRelateToManyForUpdateInput
  apiData: JSON
  apiDataContact: JSON
  apiDataLink: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ResourceUpdateArgs {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateInput!
}

input ResourceCreateInput {
  name: String
  slogan: String
  status: ResourceStatusType
  publishDate: DateTime
  region: ResourceRegionType
  section: SectionRelateToManyForCreateInput
  category: CategoryRelateToManyForCreateInput
  profile_photo: PhotoRelateToOneForCreateInput
  content: JSON
  tags: TagRelateToManyForCreateInput
  contact: JSON
  link: JSON
  relatedResources: ResourceRelateToManyForCreateInput
  apiData: JSON
  apiDataContact: JSON
  apiDataLink: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type ResourceBanner {
  id: ID!
  name: String
  order: Int
  heroImage: Photo
  status: ResourceBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum ResourceBannerStatusType {
  published
  draft
  archived
}

input ResourceBannerWhereUniqueInput {
  id: ID
  order: Int
}

input ResourceBannerWhereInput {
  AND: [ResourceBannerWhereInput!]
  OR: [ResourceBannerWhereInput!]
  NOT: [ResourceBannerWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  heroImage: PhotoWhereInput
  status: ResourceBannerStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ResourceBannerStatusTypeNullableFilter {
  equals: ResourceBannerStatusType
  in: [ResourceBannerStatusType!]
  notIn: [ResourceBannerStatusType!]
  not: ResourceBannerStatusTypeNullableFilter
}

input ResourceBannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ResourceBannerUpdateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForUpdateInput
  status: ResourceBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ResourceBannerUpdateArgs {
  where: ResourceBannerWhereUniqueInput!
  data: ResourceBannerUpdateInput!
}

input ResourceBannerCreateInput {
  name: String
  order: Int
  heroImage: PhotoRelateToOneForCreateInput
  status: ResourceBannerStatusType
  publishDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Section {
  id: ID!
  name: String
  slug: String
  order: Int
  status: SectionStatusType
  isPresent: Boolean
  heroImage: Photo
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  specialfeatureLists(
    where: SpecialfeatureListWhereInput! = {}
    orderBy: [SpecialfeatureListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SpecialfeatureList!]
  specialfeatureListsCount(where: SpecialfeatureListWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum SectionStatusType {
  active
  inactive
}

input SectionWhereUniqueInput {
  id: ID
  slug: String
  order: Int
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  order: IntNullableFilter
  status: SectionStatusTypeNullableFilter
  isPresent: BooleanFilter
  heroImage: PhotoWhereInput
  category: CategoryManyRelationFilter
  posts: PostManyRelationFilter
  specialfeatures: SpecialfeatureManyRelationFilter
  events: EventManyRelationFilter
  jobs: JobManyRelationFilter
  resources: ResourceManyRelationFilter
  specialfeatureLists: SpecialfeatureListManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SectionStatusTypeNullableFilter {
  equals: SectionStatusType
  in: [SectionStatusType!]
  notIn: [SectionStatusType!]
  not: SectionStatusTypeNullableFilter
}

input SpecialfeatureListManyRelationFilter {
  every: SpecialfeatureListWhereInput
  some: SpecialfeatureListWhereInput
  none: SpecialfeatureListWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  order: OrderDirection
  status: OrderDirection
  isPresent: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SectionUpdateInput {
  name: String
  slug: String
  order: Int
  status: SectionStatusType
  isPresent: Boolean
  heroImage: PhotoRelateToOneForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  jobs: JobRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
  specialfeatureLists: SpecialfeatureListRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SpecialfeatureListRelateToManyForUpdateInput {
  disconnect: [SpecialfeatureListWhereUniqueInput!]
  set: [SpecialfeatureListWhereUniqueInput!]
  create: [SpecialfeatureListCreateInput!]
  connect: [SpecialfeatureListWhereUniqueInput!]
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  name: String
  slug: String
  order: Int
  status: SectionStatusType
  isPresent: Boolean
  heroImage: PhotoRelateToOneForCreateInput
  category: CategoryRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  jobs: JobRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
  specialfeatureLists: SpecialfeatureListRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SpecialfeatureListRelateToManyForCreateInput {
  create: [SpecialfeatureListCreateInput!]
  connect: [SpecialfeatureListWhereUniqueInput!]
}

type Specialfeature {
  id: ID!
  title: String
  subtitle: String
  weight: Int
  storyType: String
  status: SpecialfeatureStatusType
  publishDate: DateTime
  heroImage: Photo
  heroCaption: String
  heroCreditUrl: String
  content: JSON
  columns(
    where: ColumnWhereInput! = {}
    orderBy: [ColumnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Column!]
  columnsCount(where: ColumnWhereInput! = {}): Int
  section(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  region: String
  relatedPosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  specialfeatureLists(
    where: SpecialfeatureListWhereInput! = {}
    orderBy: [SpecialfeatureListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SpecialfeatureList!]
  specialfeatureListsCount(where: SpecialfeatureListWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  previewButton: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum SpecialfeatureStatusType {
  published
  draft
  archived
}

input SpecialfeatureWhereUniqueInput {
  id: ID
}

input SpecialfeatureWhereInput {
  AND: [SpecialfeatureWhereInput!]
  OR: [SpecialfeatureWhereInput!]
  NOT: [SpecialfeatureWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringFilter
  weight: IntNullableFilter
  storyType: StringNullableFilter
  status: SpecialfeatureStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  heroCreditUrl: StringFilter
  columns: ColumnManyRelationFilter
  section: SectionManyRelationFilter
  category: CategoryManyRelationFilter
  region: StringNullableFilter
  relatedPosts: PostManyRelationFilter
  specialfeatureLists: SpecialfeatureListManyRelationFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SpecialfeatureStatusTypeNullableFilter {
  equals: SpecialfeatureStatusType
  in: [SpecialfeatureStatusType!]
  notIn: [SpecialfeatureStatusType!]
  not: SpecialfeatureStatusTypeNullableFilter
}

input SpecialfeatureOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  weight: OrderDirection
  storyType: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  heroCaption: OrderDirection
  heroCreditUrl: OrderDirection
  region: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpecialfeatureUpdateInput {
  title: String
  subtitle: String
  weight: Int
  storyType: String
  status: SpecialfeatureStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  heroCreditUrl: String
  content: JSON
  columns: ColumnRelateToManyForUpdateInput
  section: SectionRelateToManyForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  region: String
  relatedPosts: PostRelateToManyForUpdateInput
  specialfeatureLists: SpecialfeatureListRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SpecialfeatureUpdateArgs {
  where: SpecialfeatureWhereUniqueInput!
  data: SpecialfeatureUpdateInput!
}

input SpecialfeatureCreateInput {
  title: String
  subtitle: String
  weight: Int
  storyType: String
  status: SpecialfeatureStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  heroCreditUrl: String
  content: JSON
  columns: ColumnRelateToManyForCreateInput
  section: SectionRelateToManyForCreateInput
  category: CategoryRelateToManyForCreateInput
  region: String
  relatedPosts: PostRelateToManyForCreateInput
  specialfeatureLists: SpecialfeatureListRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type SpecialfeatureEditorChoice {
  id: ID!
  order: Int
  specialfeature: Specialfeature
  status: SpecialfeatureEditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum SpecialfeatureEditorChoiceStatusType {
  published
  draft
  archived
}

input SpecialfeatureEditorChoiceWhereUniqueInput {
  id: ID
  order: Int
}

input SpecialfeatureEditorChoiceWhereInput {
  AND: [SpecialfeatureEditorChoiceWhereInput!]
  OR: [SpecialfeatureEditorChoiceWhereInput!]
  NOT: [SpecialfeatureEditorChoiceWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  specialfeature: SpecialfeatureWhereInput
  status: SpecialfeatureEditorChoiceStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SpecialfeatureEditorChoiceStatusTypeNullableFilter {
  equals: SpecialfeatureEditorChoiceStatusType
  in: [SpecialfeatureEditorChoiceStatusType!]
  notIn: [SpecialfeatureEditorChoiceStatusType!]
  not: SpecialfeatureEditorChoiceStatusTypeNullableFilter
}

input SpecialfeatureEditorChoiceOrderByInput {
  id: OrderDirection
  order: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpecialfeatureEditorChoiceUpdateInput {
  order: Int
  specialfeature: SpecialfeatureRelateToOneForUpdateInput
  status: SpecialfeatureEditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SpecialfeatureEditorChoiceUpdateArgs {
  where: SpecialfeatureEditorChoiceWhereUniqueInput!
  data: SpecialfeatureEditorChoiceUpdateInput!
}

input SpecialfeatureEditorChoiceCreateInput {
  order: Int
  specialfeature: SpecialfeatureRelateToOneForCreateInput
  status: SpecialfeatureEditorChoiceStatusType
  publishDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type SpecialfeatureList {
  id: ID!
  title: String
  weight: Int
  status: SpecialfeatureListStatusType
  publishDate: DateTime
  heroImage: Photo
  content: JSON
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  manualOrderOfSpecialFeatures: JSON
  url: String
  section(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum SpecialfeatureListStatusType {
  published
  draft
  archived
}

input SpecialfeatureListWhereUniqueInput {
  id: ID
}

input SpecialfeatureListWhereInput {
  AND: [SpecialfeatureListWhereInput!]
  OR: [SpecialfeatureListWhereInput!]
  NOT: [SpecialfeatureListWhereInput!]
  id: IDFilter
  title: StringFilter
  weight: IntNullableFilter
  status: SpecialfeatureListStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  specialfeatures: SpecialfeatureManyRelationFilter
  url: StringFilter
  section: SectionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SpecialfeatureListStatusTypeNullableFilter {
  equals: SpecialfeatureListStatusType
  in: [SpecialfeatureListStatusType!]
  notIn: [SpecialfeatureListStatusType!]
  not: SpecialfeatureListStatusTypeNullableFilter
}

input SpecialfeatureListOrderByInput {
  id: OrderDirection
  title: OrderDirection
  weight: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpecialfeatureListUpdateInput {
  title: String
  weight: Int
  status: SpecialfeatureListStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  content: JSON
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  manualOrderOfSpecialFeatures: JSON
  url: String
  section: SectionRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SpecialfeatureListUpdateArgs {
  where: SpecialfeatureListWhereUniqueInput!
  data: SpecialfeatureListUpdateInput!
}

input SpecialfeatureListCreateInput {
  title: String
  weight: Int
  status: SpecialfeatureListStatusType
  publishDate: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  content: JSON
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  manualOrderOfSpecialFeatures: JSON
  url: String
  section: SectionRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  isPopular: Boolean
  isMemberOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  specialfeatures: SpecialfeatureManyRelationFilter
  jobs: JobManyRelationFilter
  events: EventManyRelationFilter
  resources: ResourceManyRelationFilter
  isPopular: BooleanFilter
  isMemberOnly: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isPopular: OrderDirection
  isMemberOnly: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  specialfeatures: SpecialfeatureRelateToManyForUpdateInput
  jobs: JobRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
  isPopular: Boolean
  isMemberOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  specialfeatures: SpecialfeatureRelateToManyForCreateInput
  jobs: JobRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
  isPopular: Boolean
  isMemberOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  email: String
  password: PasswordState
  name: String
  role: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
  role: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  role: OrderDirection
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  name: String
  role: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput!, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createBanner(data: BannerCreateInput!): Banner
  createBanners(data: [BannerCreateInput!]!): [Banner]
  updateBanner(where: BannerWhereUniqueInput!, data: BannerUpdateInput!): Banner
  updateBanners(data: [BannerUpdateArgs!]!): [Banner]
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteBanners(where: [BannerWhereUniqueInput!]!): [Banner]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createColumn(data: ColumnCreateInput!): Column
  createColumns(data: [ColumnCreateInput!]!): [Column]
  updateColumn(where: ColumnWhereUniqueInput!, data: ColumnUpdateInput!): Column
  updateColumns(data: [ColumnUpdateArgs!]!): [Column]
  deleteColumn(where: ColumnWhereUniqueInput!): Column
  deleteColumns(where: [ColumnWhereUniqueInput!]!): [Column]
  createEditorChoice(data: EditorChoiceCreateInput!): EditorChoice
  createEditorChoices(data: [EditorChoiceCreateInput!]!): [EditorChoice]
  updateEditorChoice(
    where: EditorChoiceWhereUniqueInput!
    data: EditorChoiceUpdateInput!
  ): EditorChoice
  updateEditorChoices(data: [EditorChoiceUpdateArgs!]!): [EditorChoice]
  deleteEditorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  deleteEditorChoices(where: [EditorChoiceWhereUniqueInput!]!): [EditorChoice]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createEventBanner(data: EventBannerCreateInput!): EventBanner
  createEventBanners(data: [EventBannerCreateInput!]!): [EventBanner]
  updateEventBanner(
    where: EventBannerWhereUniqueInput!
    data: EventBannerUpdateInput!
  ): EventBanner
  updateEventBanners(data: [EventBannerUpdateArgs!]!): [EventBanner]
  deleteEventBanner(where: EventBannerWhereUniqueInput!): EventBanner
  deleteEventBanners(where: [EventBannerWhereUniqueInput!]!): [EventBanner]
  createFooterBanner(data: FooterBannerCreateInput!): FooterBanner
  createFooterBanners(data: [FooterBannerCreateInput!]!): [FooterBanner]
  updateFooterBanner(
    where: FooterBannerWhereUniqueInput!
    data: FooterBannerUpdateInput!
  ): FooterBanner
  updateFooterBanners(data: [FooterBannerUpdateArgs!]!): [FooterBanner]
  deleteFooterBanner(where: FooterBannerWhereUniqueInput!): FooterBanner
  deleteFooterBanners(where: [FooterBannerWhereUniqueInput!]!): [FooterBanner]
  createHomepageBanner(data: HomepageBannerCreateInput!): HomepageBanner
  createHomepageBanners(data: [HomepageBannerCreateInput!]!): [HomepageBanner]
  updateHomepageBanner(
    where: HomepageBannerWhereUniqueInput!
    data: HomepageBannerUpdateInput!
  ): HomepageBanner
  updateHomepageBanners(data: [HomepageBannerUpdateArgs!]!): [HomepageBanner]
  deleteHomepageBanner(where: HomepageBannerWhereUniqueInput!): HomepageBanner
  deleteHomepageBanners(
    where: [HomepageBannerWhereUniqueInput!]!
  ): [HomepageBanner]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createJobBanner(data: JobBannerCreateInput!): JobBanner
  createJobBanners(data: [JobBannerCreateInput!]!): [JobBanner]
  updateJobBanner(
    where: JobBannerWhereUniqueInput!
    data: JobBannerUpdateInput!
  ): JobBanner
  updateJobBanners(data: [JobBannerUpdateArgs!]!): [JobBanner]
  deleteJobBanner(where: JobBannerWhereUniqueInput!): JobBanner
  deleteJobBanners(where: [JobBannerWhereUniqueInput!]!): [JobBanner]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createMenubar(data: MenubarCreateInput!): Menubar
  createMenubars(data: [MenubarCreateInput!]!): [Menubar]
  updateMenubar(
    where: MenubarWhereUniqueInput!
    data: MenubarUpdateInput!
  ): Menubar
  updateMenubars(data: [MenubarUpdateArgs!]!): [Menubar]
  deleteMenubar(where: MenubarWhereUniqueInput!): Menubar
  deleteMenubars(where: [MenubarWhereUniqueInput!]!): [Menubar]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createResource(data: ResourceCreateInput!): Resource
  createResources(data: [ResourceCreateInput!]!): [Resource]
  updateResource(
    where: ResourceWhereUniqueInput!
    data: ResourceUpdateInput!
  ): Resource
  updateResources(data: [ResourceUpdateArgs!]!): [Resource]
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteResources(where: [ResourceWhereUniqueInput!]!): [Resource]
  createResourceBanner(data: ResourceBannerCreateInput!): ResourceBanner
  createResourceBanners(data: [ResourceBannerCreateInput!]!): [ResourceBanner]
  updateResourceBanner(
    where: ResourceBannerWhereUniqueInput!
    data: ResourceBannerUpdateInput!
  ): ResourceBanner
  updateResourceBanners(data: [ResourceBannerUpdateArgs!]!): [ResourceBanner]
  deleteResourceBanner(where: ResourceBannerWhereUniqueInput!): ResourceBanner
  deleteResourceBanners(
    where: [ResourceBannerWhereUniqueInput!]!
  ): [ResourceBanner]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(
    where: SectionWhereUniqueInput!
    data: SectionUpdateInput!
  ): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createSpecialfeature(data: SpecialfeatureCreateInput!): Specialfeature
  createSpecialfeatures(data: [SpecialfeatureCreateInput!]!): [Specialfeature]
  updateSpecialfeature(
    where: SpecialfeatureWhereUniqueInput!
    data: SpecialfeatureUpdateInput!
  ): Specialfeature
  updateSpecialfeatures(data: [SpecialfeatureUpdateArgs!]!): [Specialfeature]
  deleteSpecialfeature(where: SpecialfeatureWhereUniqueInput!): Specialfeature
  deleteSpecialfeatures(
    where: [SpecialfeatureWhereUniqueInput!]!
  ): [Specialfeature]
  createSpecialfeatureEditorChoice(
    data: SpecialfeatureEditorChoiceCreateInput!
  ): SpecialfeatureEditorChoice
  createSpecialfeatureEditorChoices(
    data: [SpecialfeatureEditorChoiceCreateInput!]!
  ): [SpecialfeatureEditorChoice]
  updateSpecialfeatureEditorChoice(
    where: SpecialfeatureEditorChoiceWhereUniqueInput!
    data: SpecialfeatureEditorChoiceUpdateInput!
  ): SpecialfeatureEditorChoice
  updateSpecialfeatureEditorChoices(
    data: [SpecialfeatureEditorChoiceUpdateArgs!]!
  ): [SpecialfeatureEditorChoice]
  deleteSpecialfeatureEditorChoice(
    where: SpecialfeatureEditorChoiceWhereUniqueInput!
  ): SpecialfeatureEditorChoice
  deleteSpecialfeatureEditorChoices(
    where: [SpecialfeatureEditorChoiceWhereUniqueInput!]!
  ): [SpecialfeatureEditorChoice]
  createSpecialfeatureList(
    data: SpecialfeatureListCreateInput!
  ): SpecialfeatureList
  createSpecialfeatureLists(
    data: [SpecialfeatureListCreateInput!]!
  ): [SpecialfeatureList]
  updateSpecialfeatureList(
    where: SpecialfeatureListWhereUniqueInput!
    data: SpecialfeatureListUpdateInput!
  ): SpecialfeatureList
  updateSpecialfeatureLists(
    data: [SpecialfeatureListUpdateArgs!]!
  ): [SpecialfeatureList]
  deleteSpecialfeatureList(
    where: SpecialfeatureListWhereUniqueInput!
  ): SpecialfeatureList
  deleteSpecialfeatureLists(
    where: [SpecialfeatureListWhereUniqueInput!]!
  ): [SpecialfeatureList]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
  name: String
  role: String
}

type Query {
  abouts(
    where: AboutWhereInput! = {}
    orderBy: [AboutOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [About!]
  about(where: AboutWhereUniqueInput!): About
  aboutsCount(where: AboutWhereInput! = {}): Int
  banners(
    where: BannerWhereInput! = {}
    orderBy: [BannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Banner!]
  banner(where: BannerWhereUniqueInput!): Banner
  bannersCount(where: BannerWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  columns(
    where: ColumnWhereInput! = {}
    orderBy: [ColumnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Column!]
  column(where: ColumnWhereUniqueInput!): Column
  columnsCount(where: ColumnWhereInput! = {}): Int
  editorChoices(
    where: EditorChoiceWhereInput! = {}
    orderBy: [EditorChoiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EditorChoice!]
  editorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  editorChoicesCount(where: EditorChoiceWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  eventBanners(
    where: EventBannerWhereInput! = {}
    orderBy: [EventBannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventBanner!]
  eventBanner(where: EventBannerWhereUniqueInput!): EventBanner
  eventBannersCount(where: EventBannerWhereInput! = {}): Int
  footerBanners(
    where: FooterBannerWhereInput! = {}
    orderBy: [FooterBannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FooterBanner!]
  footerBanner(where: FooterBannerWhereUniqueInput!): FooterBanner
  footerBannersCount(where: FooterBannerWhereInput! = {}): Int
  homepageBanners(
    where: HomepageBannerWhereInput! = {}
    orderBy: [HomepageBannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HomepageBanner!]
  homepageBanner(where: HomepageBannerWhereUniqueInput!): HomepageBanner
  homepageBannersCount(where: HomepageBannerWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  job(where: JobWhereUniqueInput!): Job
  jobsCount(where: JobWhereInput! = {}): Int
  jobBanners(
    where: JobBannerWhereInput! = {}
    orderBy: [JobBannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [JobBanner!]
  jobBanner(where: JobBannerWhereUniqueInput!): JobBanner
  jobBannersCount(where: JobBannerWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  menubars(
    where: MenubarWhereInput! = {}
    orderBy: [MenubarOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Menubar!]
  menubar(where: MenubarWhereUniqueInput!): Menubar
  menubarsCount(where: MenubarWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resource(where: ResourceWhereUniqueInput!): Resource
  resourcesCount(where: ResourceWhereInput! = {}): Int
  resourceBanners(
    where: ResourceBannerWhereInput! = {}
    orderBy: [ResourceBannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ResourceBanner!]
  resourceBanner(where: ResourceBannerWhereUniqueInput!): ResourceBanner
  resourceBannersCount(where: ResourceBannerWhereInput! = {}): Int
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  specialfeatures(
    where: SpecialfeatureWhereInput! = {}
    orderBy: [SpecialfeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialfeature!]
  specialfeature(where: SpecialfeatureWhereUniqueInput!): Specialfeature
  specialfeaturesCount(where: SpecialfeatureWhereInput! = {}): Int
  specialfeatureEditorChoices(
    where: SpecialfeatureEditorChoiceWhereInput! = {}
    orderBy: [SpecialfeatureEditorChoiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SpecialfeatureEditorChoice!]
  specialfeatureEditorChoice(
    where: SpecialfeatureEditorChoiceWhereUniqueInput!
  ): SpecialfeatureEditorChoice
  specialfeatureEditorChoicesCount(
    where: SpecialfeatureEditorChoiceWhereInput! = {}
  ): Int
  specialfeatureLists(
    where: SpecialfeatureListWhereInput! = {}
    orderBy: [SpecialfeatureListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SpecialfeatureList!]
  specialfeatureList(
    where: SpecialfeatureListWhereUniqueInput!
  ): SpecialfeatureList
  specialfeatureListsCount(where: SpecialfeatureListWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
