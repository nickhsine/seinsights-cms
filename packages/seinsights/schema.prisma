// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model About {
  id          Int       @id @default(autoincrement())
  aboutUs     String    @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("About_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("About_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Banner {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  order         Int?      @unique
  bannerImage   Photo?    @relation("Banner_bannerImage", fields: [bannerImageId], references: [id])
  bannerImageId Int?      @map("bannerImage")
  isActive      Boolean   @default(false)
  publishDate   DateTime? @default(now())
  url           String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Banner_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Banner_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([bannerImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id                     Int                @id @default(autoincrement())
  name                   String             @default("")
  slug                   String             @unique @default("")
  order                  Int?               @unique
  status                 CategoryStatusType
  heroImage              Photo?             @relation("Category_heroImage", fields: [heroImageId], references: [id])
  heroImageId            Int?               @map("heroImage")
  section                Section?           @relation("Category_section", fields: [sectionId], references: [id])
  sectionId              Int?               @map("section")
  posts                  Post[]             @relation("Category_posts")
  specialfeatures        Specialfeature[]   @relation("Category_specialfeatures")
  events                 Event[]            @relation("Category_events")
  jobs                   Job[]              @relation("Category_jobs")
  resources              Resource[]         @relation("Category_resources")
  createdAt              DateTime?
  updatedAt              DateTime?
  createdBy              User?              @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById            Int?               @map("createdBy")
  updatedBy              User?              @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById            Int?               @map("updatedBy")
  from_Member_categories Member[]           @relation("Member_categories")

  @@index([heroImageId])
  @@index([sectionId])
  @@index([createdById])
  @@index([updatedById])
}

model Column {
  id              Int              @id @default(autoincrement())
  name            String           @default("")
  columnName      String           @default("")
  type            ColumnTypeType?
  profile_photo   Photo?           @relation("Column_profile_photo", fields: [profile_photoId], references: [id])
  profile_photoId Int?             @map("profile_photo")
  intro           Json?
  posts           Post[]           @relation("Column_posts")
  specialfeatures Specialfeature[] @relation("Column_specialfeatures")
  apiData         Json?
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?            @relation("Column_createdBy", fields: [createdById], references: [id])
  createdById     Int?             @map("createdBy")
  updatedBy       User?            @relation("Column_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?             @map("updatedBy")

  @@index([profile_photoId])
  @@index([createdById])
  @@index([updatedById])
}

model EditorChoice {
  id               Int                     @id @default(autoincrement())
  order            Int?                    @unique
  post             Post?                   @relation("EditorChoice_post", fields: [postId], references: [id])
  postId           Int?                    @map("post")
  specialfeature   Specialfeature?         @relation("EditorChoice_specialfeature", fields: [specialfeatureId], references: [id])
  specialfeatureId Int?                    @map("specialfeature")
  status           EditorChoiceStatusType? @default(draft)
  publishDate      DateTime?
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?                   @relation("EditorChoice_createdBy", fields: [createdById], references: [id])
  createdById      Int?                    @map("createdBy")
  updatedBy        User?                   @relation("EditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?                    @map("updatedBy")

  @@index([postId])
  @@index([specialfeatureId])
  @@index([createdById])
  @@index([updatedById])
}

model Event {
  id                       Int              @id @default(autoincrement())
  name                     String           @default("")
  status                   EventStatusType  @default(draft)
  publishDate              DateTime?        @default(now())
  type                     EventTypeType?
  region                   EventRegionType?
  section                  Section[]        @relation("Event_section")
  category                 Category[]       @relation("Category_events")
  heroImage                Photo?           @relation("Event_heroImage", fields: [heroImageId], references: [id])
  heroImageId              Int?             @map("heroImage")
  content                  Json?
  location                 String           @default("")
  organization             String           @default("")
  event_start              DateTime?
  event_end                DateTime?
  tags                     Tag[]            @relation("Event_tags")
  relatedEvents            Event[]          @relation("Event_relatedEvents")
  apiData                  Json?
  createdAt                DateTime?
  updatedAt                DateTime?
  createdBy                User?            @relation("Event_createdBy", fields: [createdById], references: [id])
  createdById              Int?             @map("createdBy")
  updatedBy                User?            @relation("Event_updatedBy", fields: [updatedById], references: [id])
  updatedById              Int?             @map("updatedBy")
  from_Event_relatedEvents Event[]          @relation("Event_relatedEvents")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model EventBanner {
  id          Int                    @id @default(autoincrement())
  name        String                 @default("")
  order       Int?                   @unique
  heroImage   Photo?                 @relation("EventBanner_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?                   @map("heroImage")
  status      EventBannerStatusType? @default(draft)
  publishDate DateTime?              @default(now())
  url         String                 @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?                  @relation("EventBanner_createdBy", fields: [createdById], references: [id])
  createdById Int?                   @map("createdBy")
  updatedBy   User?                  @relation("EventBanner_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?                   @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model FooterBanner {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  order         Int?      @unique
  bannerImage   Photo?    @relation("FooterBanner_bannerImage", fields: [bannerImageId], references: [id])
  bannerImageId Int?      @map("bannerImage")
  mobileImage   Photo?    @relation("FooterBanner_mobileImage", fields: [mobileImageId], references: [id])
  mobileImageId Int?      @map("mobileImage")
  isActive      Boolean   @default(false)
  publishDate   DateTime? @default(now())
  url           String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("FooterBanner_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("FooterBanner_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([bannerImageId])
  @@index([mobileImageId])
  @@index([createdById])
  @@index([updatedById])
}

model HomepageBanner {
  id          Int                       @id @default(autoincrement())
  name        String                    @default("")
  order       Int?                      @unique
  heroImage   Photo?                    @relation("HomepageBanner_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?                      @map("heroImage")
  status      HomepageBannerStatusType? @default(draft)
  publishDate DateTime?                 @default(now())
  url         String                    @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?                     @relation("HomepageBanner_createdBy", fields: [createdById], references: [id])
  createdById Int?                      @map("createdBy")
  updatedBy   User?                     @relation("HomepageBanner_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?                      @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Job {
  id                      Int               @id @default(autoincrement())
  name                    String            @default("")
  jobStatus               JobJobStatusType?
  status                  JobStatusType     @default(draft)
  publishDate             DateTime?         @default(now())
  type                    JobTypeType?
  region                  JobRegionType?
  section                 Section[]         @relation("Job_section")
  category                Category[]        @relation("Category_jobs")
  company                 String            @default("")
  location                String            @default("")
  official_website        String            @default("")
  official_website_titile String            @default("")
  profile_photo           Photo?            @relation("Job_profile_photo", fields: [profile_photoId], references: [id])
  profile_photoId         Int?              @map("profile_photo")
  content                 Json?
  tags                    Tag[]             @relation("Job_tags")
  relatedJobs             Job[]             @relation("Job_relatedJobs")
  apiData                 Json?
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?             @relation("Job_createdBy", fields: [createdById], references: [id])
  createdById             Int?              @map("createdBy")
  updatedBy               User?             @relation("Job_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?              @map("updatedBy")
  from_Job_relatedJobs    Job[]             @relation("Job_relatedJobs")

  @@index([profile_photoId])
  @@index([createdById])
  @@index([updatedById])
}

model JobBanner {
  id          Int                  @id @default(autoincrement())
  name        String               @default("")
  order       Int?                 @unique
  heroImage   Photo?               @relation("JobBanner_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?                 @map("heroImage")
  status      JobBannerStatusType? @default(draft)
  publishDate DateTime?            @default(now())
  url         String               @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?                @relation("JobBanner_createdBy", fields: [createdById], references: [id])
  createdById Int?                 @map("createdBy")
  updatedBy   User?                @relation("JobBanner_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?                 @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Member {
  id               Int        @id @default(autoincrement())
  firebaseId       String?    @unique
  isActive         Boolean    @default(false)
  hasSetCategories Boolean    @default(false)
  email            String     @unique @default("")
  donationType     String     @default("")
  beginDate        DateTime?  @default(now())
  endDate          DateTime?
  categories       Category[] @relation("Member_categories")
  favoritePosts    Post[]     @relation("Member_favoritePosts")
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?      @relation("Member_createdBy", fields: [createdById], references: [id])
  createdById      Int?       @map("createdBy")
  updatedBy        User?      @relation("Member_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?       @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Menubar {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  order       Int?      @unique
  isActive    Boolean   @default(false)
  publishDate DateTime?
  url         String    @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Menubar_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Menubar_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                                Int                  @id @default(autoincrement())
  name                              String               @default("")
  imageFile_filesize                Int?
  imageFile_extension               String?
  imageFile_width                   Int?
  imageFile_height                  Int?
  imageFile_mode                    String?
  imageFile_id                      String?
  file_filesize                     Int?
  file_mode                         String?
  file_filename                     String?
  urlOriginal                       String               @default("")
  createdAt                         DateTime?
  updatedAt                         DateTime?
  createdBy                         User?                @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                       Int?                 @map("createdBy")
  updatedBy                         User?                @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                       Int?                 @map("updatedBy")
  from_Banner_bannerImage           Banner[]             @relation("Banner_bannerImage")
  from_Category_heroImage           Category[]           @relation("Category_heroImage")
  from_Column_profile_photo         Column[]             @relation("Column_profile_photo")
  from_Event_heroImage              Event[]              @relation("Event_heroImage")
  from_EventBanner_heroImage        EventBanner[]        @relation("EventBanner_heroImage")
  from_FooterBanner_bannerImage     FooterBanner[]       @relation("FooterBanner_bannerImage")
  from_FooterBanner_mobileImage     FooterBanner[]       @relation("FooterBanner_mobileImage")
  from_HomepageBanner_heroImage     HomepageBanner[]     @relation("HomepageBanner_heroImage")
  from_Job_profile_photo            Job[]                @relation("Job_profile_photo")
  from_JobBanner_heroImage          JobBanner[]          @relation("JobBanner_heroImage")
  from_Post_heroImage               Post[]               @relation("Post_heroImage")
  from_Resource_profile_photo       Resource[]           @relation("Resource_profile_photo")
  from_ResourceBanner_heroImage     ResourceBanner[]     @relation("ResourceBanner_heroImage")
  from_Section_heroImage            Section[]            @relation("Section_heroImage")
  from_Specialfeature_heroImage     Specialfeature[]     @relation("Specialfeature_heroImage")
  from_SpecialfeatureList_heroImage SpecialfeatureList[] @relation("SpecialfeatureList_heroImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Post {
  id                               Int              @id @default(autoincrement())
  title                            String           @default("")
  weight                           Int?             @default(85)
  storyType                        String?
  status                           PostStatusType?  @default(draft)
  publishDate                      DateTime?        @default(now())
  heroImage                        Photo?           @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                      Int?             @map("heroImage")
  heroCaption                      String           @default("")
  heroCreditUrl                    String           @default("")
  brief                            Json?
  content                          Json?
  columns                          Column[]         @relation("Column_posts")
  section                          Section[]        @relation("Post_section")
  category                         Category[]       @relation("Category_posts")
  region                           String?
  relatedPosts                     Post[]           @relation("Post_relatedPosts")
  tags                             Tag[]            @relation("Post_tags")
  isPremium                        Boolean          @default(false)
  oldCategory                      String?
  apiDataBrief                     Json?
  apiData                          Json?
  createdAt                        DateTime?
  updatedAt                        DateTime?
  createdBy                        User?            @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                      Int?             @map("createdBy")
  updatedBy                        User?            @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                      Int?             @map("updatedBy")
  from_EditorChoice_post           EditorChoice[]   @relation("EditorChoice_post")
  from_Member_favoritePosts        Member[]         @relation("Member_favoritePosts")
  from_Post_relatedPosts           Post[]           @relation("Post_relatedPosts")
  from_Specialfeature_relatedPosts Specialfeature[] @relation("Specialfeature_relatedPosts")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Resource {
  id                             Int                 @id @default(autoincrement())
  name                           String              @default("")
  slogan                         String              @default("")
  status                         ResourceStatusType  @default(draft)
  publishDate                    DateTime?           @default(now())
  region                         ResourceRegionType?
  section                        Section[]           @relation("Resource_section")
  category                       Category[]          @relation("Category_resources")
  profile_photo                  Photo?              @relation("Resource_profile_photo", fields: [profile_photoId], references: [id])
  profile_photoId                Int?                @map("profile_photo")
  content                        Json?
  tags                           Tag[]               @relation("Resource_tags")
  contact                        Json?
  link                           Json?
  relatedResources               Resource[]          @relation("Resource_relatedResources")
  apiData                        Json?
  apiDataContact                 Json?
  apiDataLink                    Json?
  createdAt                      DateTime?
  updatedAt                      DateTime?
  createdBy                      User?               @relation("Resource_createdBy", fields: [createdById], references: [id])
  createdById                    Int?                @map("createdBy")
  updatedBy                      User?               @relation("Resource_updatedBy", fields: [updatedById], references: [id])
  updatedById                    Int?                @map("updatedBy")
  from_Resource_relatedResources Resource[]          @relation("Resource_relatedResources")

  @@index([profile_photoId])
  @@index([createdById])
  @@index([updatedById])
}

model ResourceBanner {
  id          Int                       @id @default(autoincrement())
  name        String                    @default("")
  order       Int?                      @unique
  heroImage   Photo?                    @relation("ResourceBanner_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?                      @map("heroImage")
  status      ResourceBannerStatusType? @default(draft)
  publishDate DateTime?                 @default(now())
  url         String                    @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?                     @relation("ResourceBanner_createdBy", fields: [createdById], references: [id])
  createdById Int?                      @map("createdBy")
  updatedBy   User?                     @relation("ResourceBanner_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?                      @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Section {
  id                  Int                  @id @default(autoincrement())
  name                String               @default("")
  slug                String               @unique @default("")
  order               Int?                 @unique
  status              SectionStatusType
  isPresent           Boolean              @default(true)
  heroImage           Photo?               @relation("Section_heroImage", fields: [heroImageId], references: [id])
  heroImageId         Int?                 @map("heroImage")
  category            Category[]           @relation("Category_section")
  posts               Post[]               @relation("Post_section")
  specialfeatures     Specialfeature[]     @relation("Section_specialfeatures")
  events              Event[]              @relation("Event_section")
  jobs                Job[]                @relation("Job_section")
  resources           Resource[]           @relation("Resource_section")
  specialfeatureLists SpecialfeatureList[] @relation("Section_specialfeatureLists")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                @relation("Section_createdBy", fields: [createdById], references: [id])
  createdById         Int?                 @map("createdBy")
  updatedBy           User?                @relation("Section_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                 @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Specialfeature {
  id                                             Int                          @id @default(autoincrement())
  title                                          String                       @default("")
  subtitle                                       String                       @default("")
  weight                                         Int?                         @default(85)
  storyType                                      String?
  status                                         SpecialfeatureStatusType?    @default(draft)
  publishDate                                    DateTime?                    @default(now())
  heroImage                                      Photo?                       @relation("Specialfeature_heroImage", fields: [heroImageId], references: [id])
  heroImageId                                    Int?                         @map("heroImage")
  heroCaption                                    String                       @default("")
  heroCreditUrl                                  String                       @default("")
  content                                        Json?
  columns                                        Column[]                     @relation("Column_specialfeatures")
  section                                        Section[]                    @relation("Section_specialfeatures")
  category                                       Category[]                   @relation("Category_specialfeatures")
  region                                         String?
  relatedPosts                                   Post[]                       @relation("Specialfeature_relatedPosts")
  specialfeatureLists                            SpecialfeatureList[]         @relation("Specialfeature_specialfeatureLists")
  tags                                           Tag[]                        @relation("Specialfeature_tags")
  apiData                                        Json?
  createdAt                                      DateTime?
  updatedAt                                      DateTime?
  createdBy                                      User?                        @relation("Specialfeature_createdBy", fields: [createdById], references: [id])
  createdById                                    Int?                         @map("createdBy")
  updatedBy                                      User?                        @relation("Specialfeature_updatedBy", fields: [updatedById], references: [id])
  updatedById                                    Int?                         @map("updatedBy")
  from_EditorChoice_specialfeature               EditorChoice[]               @relation("EditorChoice_specialfeature")
  from_SpecialfeatureEditorChoice_specialfeature SpecialfeatureEditorChoice[] @relation("SpecialfeatureEditorChoice_specialfeature")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model SpecialfeatureEditorChoice {
  id               Int                                   @id @default(autoincrement())
  order            Int?                                  @unique
  specialfeature   Specialfeature?                       @relation("SpecialfeatureEditorChoice_specialfeature", fields: [specialfeatureId], references: [id])
  specialfeatureId Int?                                  @map("specialfeature")
  status           SpecialfeatureEditorChoiceStatusType? @default(draft)
  publishDate      DateTime?                             @default(now())
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?                                 @relation("SpecialfeatureEditorChoice_createdBy", fields: [createdById], references: [id])
  createdById      Int?                                  @map("createdBy")
  updatedBy        User?                                 @relation("SpecialfeatureEditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?                                  @map("updatedBy")

  @@index([specialfeatureId])
  @@index([createdById])
  @@index([updatedById])
}

model SpecialfeatureList {
  id                           Int                           @id @default(autoincrement())
  title                        String                        @default("")
  weight                       Int?                          @default(85)
  status                       SpecialfeatureListStatusType? @default(draft)
  publishDate                  DateTime?                     @default(now())
  heroImage                    Photo?                        @relation("SpecialfeatureList_heroImage", fields: [heroImageId], references: [id])
  heroImageId                  Int?                          @map("heroImage")
  content                      Json?
  specialfeatures              Specialfeature[]              @relation("Specialfeature_specialfeatureLists")
  manualOrderOfSpecialFeatures Json?
  url                          String                        @default("")
  section                      Section[]                     @relation("Section_specialfeatureLists")
  apiData                      Json?
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?                         @relation("SpecialfeatureList_createdBy", fields: [createdById], references: [id])
  createdById                  Int?                          @map("createdBy")
  updatedBy                    User?                         @relation("SpecialfeatureList_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?                          @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id              Int              @id @default(autoincrement())
  name            String           @default("")
  posts           Post[]           @relation("Post_tags")
  specialfeatures Specialfeature[] @relation("Specialfeature_tags")
  jobs            Job[]            @relation("Job_tags")
  events          Event[]          @relation("Event_tags")
  resources       Resource[]       @relation("Resource_tags")
  isPopular       Boolean          @default(false)
  isMemberOnly    Boolean          @default(false)
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?            @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById     Int?             @map("createdBy")
  updatedBy       User?            @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?             @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                                        Int                          @id @default(autoincrement())
  email                                     String                       @unique @default("")
  password                                  String
  name                                      String                       @default("")
  role                                      String
  from_About_createdBy                      About[]                      @relation("About_createdBy")
  from_About_updatedBy                      About[]                      @relation("About_updatedBy")
  from_Banner_createdBy                     Banner[]                     @relation("Banner_createdBy")
  from_Banner_updatedBy                     Banner[]                     @relation("Banner_updatedBy")
  from_Category_createdBy                   Category[]                   @relation("Category_createdBy")
  from_Category_updatedBy                   Category[]                   @relation("Category_updatedBy")
  from_Column_createdBy                     Column[]                     @relation("Column_createdBy")
  from_Column_updatedBy                     Column[]                     @relation("Column_updatedBy")
  from_EditorChoice_createdBy               EditorChoice[]               @relation("EditorChoice_createdBy")
  from_EditorChoice_updatedBy               EditorChoice[]               @relation("EditorChoice_updatedBy")
  from_Event_createdBy                      Event[]                      @relation("Event_createdBy")
  from_Event_updatedBy                      Event[]                      @relation("Event_updatedBy")
  from_EventBanner_createdBy                EventBanner[]                @relation("EventBanner_createdBy")
  from_EventBanner_updatedBy                EventBanner[]                @relation("EventBanner_updatedBy")
  from_FooterBanner_createdBy               FooterBanner[]               @relation("FooterBanner_createdBy")
  from_FooterBanner_updatedBy               FooterBanner[]               @relation("FooterBanner_updatedBy")
  from_HomepageBanner_createdBy             HomepageBanner[]             @relation("HomepageBanner_createdBy")
  from_HomepageBanner_updatedBy             HomepageBanner[]             @relation("HomepageBanner_updatedBy")
  from_Job_createdBy                        Job[]                        @relation("Job_createdBy")
  from_Job_updatedBy                        Job[]                        @relation("Job_updatedBy")
  from_JobBanner_createdBy                  JobBanner[]                  @relation("JobBanner_createdBy")
  from_JobBanner_updatedBy                  JobBanner[]                  @relation("JobBanner_updatedBy")
  from_Member_createdBy                     Member[]                     @relation("Member_createdBy")
  from_Member_updatedBy                     Member[]                     @relation("Member_updatedBy")
  from_Menubar_createdBy                    Menubar[]                    @relation("Menubar_createdBy")
  from_Menubar_updatedBy                    Menubar[]                    @relation("Menubar_updatedBy")
  from_Photo_createdBy                      Photo[]                      @relation("Photo_createdBy")
  from_Photo_updatedBy                      Photo[]                      @relation("Photo_updatedBy")
  from_Post_createdBy                       Post[]                       @relation("Post_createdBy")
  from_Post_updatedBy                       Post[]                       @relation("Post_updatedBy")
  from_Resource_createdBy                   Resource[]                   @relation("Resource_createdBy")
  from_Resource_updatedBy                   Resource[]                   @relation("Resource_updatedBy")
  from_ResourceBanner_createdBy             ResourceBanner[]             @relation("ResourceBanner_createdBy")
  from_ResourceBanner_updatedBy             ResourceBanner[]             @relation("ResourceBanner_updatedBy")
  from_Section_createdBy                    Section[]                    @relation("Section_createdBy")
  from_Section_updatedBy                    Section[]                    @relation("Section_updatedBy")
  from_Specialfeature_createdBy             Specialfeature[]             @relation("Specialfeature_createdBy")
  from_Specialfeature_updatedBy             Specialfeature[]             @relation("Specialfeature_updatedBy")
  from_SpecialfeatureEditorChoice_createdBy SpecialfeatureEditorChoice[] @relation("SpecialfeatureEditorChoice_createdBy")
  from_SpecialfeatureEditorChoice_updatedBy SpecialfeatureEditorChoice[] @relation("SpecialfeatureEditorChoice_updatedBy")
  from_SpecialfeatureList_createdBy         SpecialfeatureList[]         @relation("SpecialfeatureList_createdBy")
  from_SpecialfeatureList_updatedBy         SpecialfeatureList[]         @relation("SpecialfeatureList_updatedBy")
  from_Tag_createdBy                        Tag[]                        @relation("Tag_createdBy")
  from_Tag_updatedBy                        Tag[]                        @relation("Tag_updatedBy")
}

enum CategoryStatusType {
  active
  inactive
}

enum ColumnTypeType {
  trend
  entrepreneur
  publication
}

enum EditorChoiceStatusType {
  published
  draft
  archived
}

enum EventStatusType {
  published
  draft
  archived
}

enum EventTypeType {
  seinsight
  external
}

enum EventRegionType {
  global
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
}

enum EventBannerStatusType {
  published
  draft
  archived
}

enum HomepageBannerStatusType {
  published
  draft
  archived
}

enum JobJobStatusType {
  opening
  closed
}

enum JobStatusType {
  published
  draft
  archived
}

enum JobTypeType {
  fulltime
  parttime
  intern
  volunteer
}

enum JobRegionType {
  global
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
}

enum JobBannerStatusType {
  published
  draft
  archived
}

enum PostStatusType {
  published
  draft
  scheduled
  archived
}

enum ResourceStatusType {
  published
  draft
  archived
}

enum ResourceRegionType {
  global
  TW
  KLU
  TPH
  TPE
  TYC
  HSH
  HSC
  MAL
  TXG
  NTC
  CWH
  YLH
  CYI
  CHY
  TNN
  KHH
  IUH
  TTT
  HWA
  ILN
  PEH
  KMN
  LNN
  NAME
  UK
  EURO
  NZAU
  AFR
  ME
  LAME
  JP
  KR
  HKMO
  CH
  SEA
  SA
  others
}

enum ResourceBannerStatusType {
  published
  draft
  archived
}

enum SectionStatusType {
  active
  inactive
}

enum SpecialfeatureStatusType {
  published
  draft
  archived
}

enum SpecialfeatureEditorChoiceStatusType {
  published
  draft
  archived
}

enum SpecialfeatureListStatusType {
  published
  draft
  archived
}